server:
  port: 8888

spring:
  application:
    name: gateway-application

  cloud:
    # Spring Cloud Gateway 配置项，对应 GatewayProperties 类
    gateway:
      # 路由配置项，对应 RouteDefinition 数组
      routes:
        - id: yudaoyuanma # 路由的编号
          uri: http://www.iocoder.cn # 路由到的目标地址
          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组
            - Path=/blog
          filters:
            - StripPrefix=1
        - id: oschina # 路由的编号
          uri: https://www.oschina.net # 路由的目标地址
          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组
            - Path=/oschina
          filters: # 过滤器，对请求进行拦截，实现自定义的功能，对应 FilterDefinition 数组
            - StripPrefix=1
      # 与 Spring Cloud 注册中心的集成，对应 DiscoveryLocatorProperties 类
      discovery:
        locator:
          enabled: true # 是否开启，默认为 false 关闭
          url-expression: "'lb://' + serviceId" # 路由的目标地址的表达式，默认为 "'lb://' + serviceId"
#可能 url-expression 配置项有点费解，我们来重点解释下。
#lb:// 前缀，表示将请求负载均衡转发到对应的服务的实例。
#"'lb://' + serviceId" Spring EL 表达式，将从注册中心获得到的服务列表，每一个服务的名字对应 serviceId，最终使用 Spring EL 表达式进行格式化。

    # Nacos 作为注册中心的配置项
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848 # Nacos 服务器地址


#     等价于
#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: ReactiveCompositeDiscoveryClient_user-service
#          uri: lb://user-service
#          predicates:
#            - Path=/user-service/**
#          filters:
#            - RewritePath=/user-service/(?<remaining>.*), /${remaining} # 将 /user-service 前缀剔除
#        - id: ReactiveCompositeDiscoveryClient_order-service
#          uri: lb://order-service
#          predicates:
#            - Path=/order-service/**
#          filters:
#            - RewritePath=/order-service/(?<remaining>.*), /${remaining} # 将 /order-service 前缀剔除

